/*////////////////////////////////////////////////////////
 * File:        String.cpp
 * Author:      Blankycan
 * Date:        2013-09-05
/////////////////////////////////////// Â© Blankycan 2013 */
#include "String.h"
///////////////////////////////////////////////////////////
#include <string.h>
///////////////////////////////////////////////////////////
using namespace Util;
///////////////////////////////////////////////////////////

String::String()
{
	size = 32;
	length = 0;
	data = new char[size];
	data[0] = '\0';
}

String::String( const char *str )
{
	length = strlen(str);
	// If we have enough size
	size_t increment = length;
	// Allocate a increment of a 10th of the current size
	// But make sure it is at least 8
	size_t addIncrement = int(float(increment)*0.1f);
	if(addIncrement < 8)
		increment += 8;
	else
		increment += addIncrement;

	// Allocate the new char array
	size = increment;
	data = new char[size];
	// Copy all the data, using loop
	size_t i;
	for(i = 0; i < length+1; ++i)
	{
		data[i] = data[i];
	}
	data[i] = '\0';
}

String::~String()
{
	if(data)
		delete[] data;
	size = 0;
	length = 0;
}

void String::AppendLoop( char* str )
{
	size_t strLen = strlen(str);
	size_t sizeUnused = (size - length);
	// If we have enough size
	if(sizeUnused > strLen)
	{
		strcat(data, str);
		length = strlen(data);
	}
	// Else we must allocate more space
	else
	{
		size_t increment = strLen-sizeUnused;
		// Allocate a increment of a 10th of the current size
		// But make sure it is at least 8
		size_t addIncrement = int(float(size+increment)*0.1f);
		if(addIncrement < 8)
			increment += 8;
		else
			increment += addIncrement;

		// Allocate the new char array
		size += increment;
		char *newData = new char[size];
		// Copy all the data, using loop
		for(size_t i = 0; i < length+1; ++i)
		{
			newData[i] = data[i];
		}
		delete[] data;
		data = &newData[0];
	}
}

void String::AppendMemcpy( char* str )
{
	size_t strLen = strlen(str);
	size_t sizeUnused = (size - length);
	// If we have enough size
	if(sizeUnused > strLen)
	{
		strcat(data, str);
		length = strlen(data);
	}
	// Else we must allocate more space
	else
	{
		size_t increment = strLen-sizeUnused;
		// Allocate a increment of a 10th of the current size
		// But make sure it is at least 8
		size_t addIncrement = int(float(size+increment)*0.1f);
		if(addIncrement < 8)
			increment += 8;
		else
			increment += addIncrement;

		// Allocate the new char array
		size += increment;
		char *newData = new char[size];
		// Copy all the data, using memcpy	
		memcpy(newData, data, length+1);
		
		delete[] data;
		data = &newData[0];
	}
}
